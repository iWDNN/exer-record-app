import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import uuid from "react-uuid";
import styled from "styled-components";
import { addLog, IRecord } from "../redux/exercise/exerLogsSlice";
import { setTime, timeIncrease } from "../redux/time/timeSlice";
import {
  restToggleSwitch,
  startToggleSwitch,
} from "../redux/toggle/toggleSlice";
import { useAppDispatch, useAppSelector } from "../redux/hooks";
import { EXER_LOGS } from "../ls-type";
import { countdown, formatTime } from "../utils";

interface IRestTime {
  restTime: number;
}

const Container = styled.div`
  width: 100%;
  margin-top: 50px;
  * {
    /* border: 1px solid black; */
    padding: 5px;
  }
`;
const Title = styled.h1`
  font-size: 1.3em;
  font-weight: 500;
  text-align: center;
`;
const Time = styled.div`
  font-size: 5em;
  font-weight: 600;
  padding: 10px 0;
  text-align: center;
  p {
    font-size: 20px;
    span {
      display: block;
    }
  }
`;
const StateMessage = styled.span<{ curState?: string }>`
  color: ${(props) => {
    if (props.curState === "운동중") return props.theme.red;
    else if (props.curState === "휴식중") return props.theme.green;
    else if (props.curState === "운동끝") return props.theme.blue;
  }};
`;
const BtnCt = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  div {
    display: flex;
    justify-content: center;
    align-items: center;
    button {
      padding: 0.5em 1em;
      background-color: transparent;
      border: 1px solid #121212;
      cursor: pointer;
    }
  }
  div:first-child {
  }
  div:last-child {
  }
`;
const Records = styled.ul`
  /* padding: 1em; */
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-top: 20px;
  h2 {
    font-size: 1.1em;
    font-weight: 600;
  }
`;
const Record = styled.li`
  border-bottom: 1.5px solid #eee;
  border-radius: 2px;
`;

function PlayTime() {
  const dispatch = useAppDispatch();
  const { time } = useAppSelector((state) => state.time);

  useEffect(() => {
    const interval = setInterval(() => {
      dispatch(timeIncrease());
    }, 1000);
    return () => {
      clearInterval(interval);
    };
  }, []);
  return <>{formatTime(time)}</>;
}

function RestTime({ restTime }: IRestTime) {
  const [time, setTime] = useState(restTime);
  const dispatch = useAppDispatch();
  const asyncAwait = async () => {
    await countdown(restTime, setTime);
    dispatch(restToggleSwitch(false));
    dispatch(startToggleSwitch(true));
  };
  useEffect(() => {
    asyncAwait();
  }, []);
  return <>{formatTime(time)}</>;
}

export default function PlayExer() {
  const { exerId } = useParams();
  const navigate = useNavigate();
  //store
  const dispatch = useAppDispatch();
  const [exercise] = useAppSelector((state) => state.exercise).filter(
    (exer) => exer.id === exerId
  );
  const { time } = useAppSelector((state) => state.time);

  const startToggle = useAppSelector((state) => state.toggle.startToggle);
  const restToggle = useAppSelector((state) => state.toggle.restToggle);

  // component
  const [initStart, setInitStart] = useState(false);
  const [cmp, setCmp] = useState(false);
  const [records, setRecords] = useState<number[]>([]);

  //event
  const onClickStart = () => {
    dispatch(startToggleSwitch("toggle"));
    setInitStart(true);
  };

  const onSubmitLog = () => {
    dispatch(restToggleSwitch(false));
    const result: IRecord = {
      id: uuid(),
      date: new Date().toString(),
      name: exercise.exerName,
      detailTimes: records,
      playSetCount: records.length,
      setCount: exercise.exerSetCount,
      setRestTerm: exercise.exerSetRestTerm,
      exerCount: exercise.exerCount,
      cmp: records.length >= +exercise.exerSetCount,
    };
    const exerLogsLS: IRecord[] = JSON.parse(
      localStorage.getItem(EXER_LOGS) as any
    );
    localStorage.setItem(EXER_LOGS, JSON.stringify([...exerLogsLS, result]));
    dispatch(addLog(result));
  };
  const onClickEnd = () => {
    onSubmitLog();
    navigate("/");
  };

  const onClickSetCmp = async () => {
    setRecords((prev) => [...prev, time]);
    dispatch(setTime(0)); // 리덕스 현재 시간 초기화
    dispatch(startToggleSwitch(false));
  };
  const watchState = () => {
    if (initStart) {
      if (restToggle) {
        return "휴식중";
      } else if (startToggle) {
        return "운동중";
      } else if (!restToggle && !startToggle) {
        return "운동끝";
      }
    }
  };

  useEffect(() => {
    dispatch(startToggleSwitch(false));
    dispatch(restToggleSwitch(false));
  }, []);

  useEffect(() => {
    if (records.length === +exercise.exerSetCount) {
      setCmp(true);
      onSubmitLog();
    } else if (records.length > 0) {
      dispatch(restToggleSwitch(true));
    }
  }, [records]);

  return (
    <Container>
      <Title>{exercise.exerName}</Title>
      <Time>
        {restToggle ? (
          <RestTime restTime={+exercise.exerSetRestTerm} />
        ) : startToggle ? (
          <PlayTime />
        ) : (
          formatTime(time)
        )}
        <p>
          <span>
            {records.length}/{exercise.exerSetCount}
          </span>
          <StateMessage curState={watchState()}>{watchState()}</StateMessage>
        </p>
      </Time>
      <BtnCt>
        {!cmp && (
          <>
            <div>
              <button onClick={onClickStart}>
                {restToggle
                  ? "휴식중"
                  : !initStart
                  ? "시작"
                  : startToggle
                  ? "일시정지"
                  : "재시작"}
              </button>
              {restToggle ? null : (
                <button onClick={onClickSetCmp}>세트완료</button>
              )}
            </div>
            <div>
              <button onClick={onClickEnd}>끝내기</button>
            </div>
          </>
        )}
      </BtnCt>
      <Records>
        <h2>기록</h2>
        {records.map((record, i) => (
          <Record key={uuid()}>
            <span>{i + 1} set</span>
            <span>{formatTime(record)}</span>
          </Record>
        ))}
      </Records>
    </Container>
  );
}
